generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Answer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  // v         Int      @map("__v")
  body      String
  createdAt DateTime @default(now()) @db.Date
  // from      String
  // local     String
  points    Int
  question  String   @db.ObjectId
  updatedAt DateTime @default(now()) @db.Date
  /// Could not determine type: the field only had null or empty values in the sample set.
  // voted     Json?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
}

model AnswerVotes {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  // v      Int    @map("__v")
  ansId  String @db.ObjectId
  userId String @db.ObjectId
  vote   String
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  // v         Int      @map("__v")
  author    String   @db.ObjectId
  body      String
  createdAt DateTime @default(now()) @db.Date
  parentId  String   @db.ObjectId
  updatedAt DateTime @default(now()) @db.Date
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  // v         Int      @map("__v")
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  body      String
  createdAt DateTime @default(now()) @db.Date
  // from      String
  // local     String
  points    Int      @default(0)
  tags      String[]
  title     String
  updatedAt DateTime @default(now()) @db.Date
  views     Int      @default(0)
  /// Could not determine type: the field only had null or empty values in the sample set.
  // voted     String?
}

model QuestionVotes {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  // v      Int    @map("__v")
  quesId String @db.ObjectId
  userId String @db.ObjectId
  vote   String
}

model Tag {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  // v             Int    @map("__v")
  name          String
  questionCount Int
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  // v            Int      @map("__v")
  createdAt    DateTime   @default(now()) @db.Date
  passwordHash String
  rep          Int
  role         String
  username     String     @unique(map: "username_1")
  questions    Question[]
  answers      Answer[]
}
