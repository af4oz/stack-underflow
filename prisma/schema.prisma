generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  // v         Int      @map("__v")
  body       String
  createdAt  DateTime @default(now()) @db.Date
  // from      String
  // local     String
  points     Int      @default(0)
  updatedAt  DateTime @default(now()) @db.Date
  /// Could not determine type: the field only had null or empty values in the sample set.
  // voted     Json?
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
}

model AnswerVotes {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  // v      Int    @map("__v")
  ansId  String @db.ObjectId
  userId String @db.ObjectId
  vote   VoteType
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  // v         Int      @map("__v")
  author    String   @db.ObjectId
  body      String
  createdAt DateTime @default(now()) @db.Date
  parentId  String   @db.ObjectId
  updatedAt DateTime @default(now()) @db.Date
}

model Question {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  // v         Int      @map("__v")
  author         User     @relation(fields: [authorId], references: [id])
  authorId       String   @db.ObjectId
  body           String
  createdAt      DateTime @default(now()) @db.Date
  // from      String
  // local     String
  points         Int      @default(0)
  tags           String[]
  title          String
  updatedAt      DateTime @default(now()) @db.Date
  views          Int      @default(0)
  /// Could not determine type: the field only had null or empty values in the sample set.
  // voted     String?
  answers        Answer[]
  acceptedAnswer String?  @db.ObjectId
}

model QuestionVotes {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  // v      Int    @map("__v")
  quesId String @db.ObjectId
  userId String @db.ObjectId
  vote   VoteType
}

model Tag {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  // v             Int    @map("__v")
  name          String @unique
  questionCount Int    @default(1)
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  // v            Int      @map("__v")
  createdAt    DateTime   @default(now()) @db.Date
  passwordHash String
  rep          Int        @default(0)
  role         RoleType   @default(USER)
  username     String     @unique(map: "username_1")
  questions    Question[]
  answers      Answer[]
}

enum RoleType {
  USER
  ADMIN
}

enum VoteType {
  DOWNVOTE
  UPVOTE
}
