/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "fragment AuthorDetails on Author {\n  id\n  username\n}\n\nfragment AnswerDetails on Answer {\n  id\n  author {\n    ...AuthorDetails\n  }\n  body\n  comments {\n    ...CommentDetails\n  }\n  points\n  voted\n  createdAt\n  updatedAt\n}\n\nfragment QuestionDetails on Question {\n  id\n  author {\n    ...AuthorDetails\n  }\n  title\n  body\n  tags\n  points\n  views\n  acceptedAnswer\n  comments {\n    ...CommentDetails\n  }\n  answers {\n    ...AnswerDetails\n  }\n  voted\n  createdAt\n  updatedAt\n}\n\nfragment PostQuestionDetails on Question {\n  id\n  author {\n    ...AuthorDetails\n  }\n  title\n  body\n  tags\n  points\n  views\n  voted\n  createdAt\n  updatedAt\n}\n\nfragment LoggedUserDetails on LoggedUser {\n  id\n  username\n  role\n  token\n}\n\nfragment CommentDetails on Comment {\n  id\n  author {\n    ...AuthorDetails\n  }\n  body\n  createdAt\n  updatedAt\n}": types.AuthorDetailsFragmentDoc,
    "mutation registerUser($username: String!, $password: String!) {\n  register(username: $username, password: $password) {\n    ...LoggedUserDetails\n  }\n}\n\nmutation loginUser($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    ...LoggedUserDetails\n  }\n}\n\nmutation addQuestion($title: String!, $body: String!, $tags: [String!]!) {\n  postQuestion(title: $title, body: $body, tags: $tags) {\n    ...PostQuestionDetails\n  }\n}\n\nmutation updateQuestion($quesId: ID!, $title: String!, $body: String!, $tags: [String!]!) {\n  editQuestion(quesId: $quesId, title: $title, body: $body, tags: $tags) {\n    ...QuestionDetails\n  }\n}\n\nmutation removeQuestion($quesId: ID!) {\n  deleteQuestion(quesId: $quesId)\n}\n\nmutation submitQuesVote($quesId: ID!, $voteType: VoteType!) {\n  voteQuestion(quesId: $quesId, voteType: $voteType) {\n    id\n    voted\n    points\n  }\n}\n\nmutation addComment($parentId: ID!, $parentType: CommentParentType!, $body: String!) {\n  addComment(parentId: $parentId, body: $body, parentType: $parentType) {\n    ...CommentDetails\n  }\n}\n\nmutation editComment($commentId: ID!, $body: String!) {\n  editComment(commentId: $commentId, body: $body) {\n    ...CommentDetails\n  }\n}\n\nmutation deleteComment($commentId: ID!) {\n  deleteComment(commentId: $commentId)\n}\n\nmutation addAnswer($quesId: ID!, $body: String!) {\n  postAnswer(quesId: $quesId, body: $body) {\n    ...AnswerDetails\n  }\n}\n\nmutation updateAnswer($quesId: ID!, $ansId: ID!, $body: String!) {\n  editAnswer(quesId: $quesId, ansId: $ansId, body: $body) {\n    ...AnswerDetails\n  }\n}\n\nmutation removeAnswer($quesId: ID!, $ansId: ID!) {\n  deleteAnswer(quesId: $quesId, ansId: $ansId)\n}\n\nmutation submitAnsVote($quesId: ID!, $ansId: ID!, $voteType: VoteType!) {\n  voteAnswer(quesId: $quesId, ansId: $ansId, voteType: $voteType) {\n    id\n    voted\n    points\n  }\n}\n\nmutation submitAcceptAns($quesId: ID!, $ansId: ID!) {\n  acceptAnswer(quesId: $quesId, ansId: $ansId) {\n    id\n    acceptedAnswer\n  }\n}": types.RegisterUserDocument,
    "query fetchQuestions($sortBy: QuestionSortBy!, $page: Int!, $limit: Int!, $filterByTag: String, $filterBySearch: String) {\n  getQuestions(\n    sortBy: $sortBy\n    page: $page\n    limit: $limit\n    filterByTag: $filterByTag\n    filterBySearch: $filterBySearch\n  ) {\n    totalCount\n    currentPage\n    pageSize\n    search\n    tag\n    sortBy\n    questions {\n      id\n      author {\n        ...AuthorDetails\n      }\n      title\n      body\n      tags\n      points\n      views\n      createdAt\n      updatedAt\n      answerCount\n    }\n  }\n}\n\nquery fetchQuestion($quesId: ID!) {\n  viewQuestion(quesId: $quesId) {\n    id\n    author {\n      ...AuthorDetails\n    }\n    title\n    body\n    tags\n    points\n    views\n    createdAt\n    updatedAt\n    answers {\n      ...AnswerDetails\n    }\n    comments {\n      ...CommentDetails\n    }\n    acceptedAnswer\n    voted\n  }\n}\n\nquery fetchUser($username: String!) {\n  getUser(username: $username) {\n    id\n    username\n    role\n    createdAt\n    rep\n    totalQuestions\n    totalAnswers\n    recentQuestions {\n      id\n      title\n      points\n      createdAt\n    }\n    recentAnswers {\n      id\n      title\n      points\n      createdAt\n    }\n  }\n}\n\nquery fetchAllTags($limit: Int!, $cursor: ID, $filterBySearch: String) {\n  getAllTags(limit: $limit, cursor: $cursor, filterBySearch: $filterBySearch) {\n    tags {\n      name\n      id\n      questionCount\n    }\n    nextCursor\n  }\n}\n\nquery fetchAllUsers {\n  getAllUsers {\n    id\n    username\n    createdAt\n  }\n}": types.FetchQuestionsDocument,
};

export function graphql(source: "fragment AuthorDetails on Author {\n  id\n  username\n}\n\nfragment AnswerDetails on Answer {\n  id\n  author {\n    ...AuthorDetails\n  }\n  body\n  comments {\n    ...CommentDetails\n  }\n  points\n  voted\n  createdAt\n  updatedAt\n}\n\nfragment QuestionDetails on Question {\n  id\n  author {\n    ...AuthorDetails\n  }\n  title\n  body\n  tags\n  points\n  views\n  acceptedAnswer\n  comments {\n    ...CommentDetails\n  }\n  answers {\n    ...AnswerDetails\n  }\n  voted\n  createdAt\n  updatedAt\n}\n\nfragment PostQuestionDetails on Question {\n  id\n  author {\n    ...AuthorDetails\n  }\n  title\n  body\n  tags\n  points\n  views\n  voted\n  createdAt\n  updatedAt\n}\n\nfragment LoggedUserDetails on LoggedUser {\n  id\n  username\n  role\n  token\n}\n\nfragment CommentDetails on Comment {\n  id\n  author {\n    ...AuthorDetails\n  }\n  body\n  createdAt\n  updatedAt\n}"): (typeof documents)["fragment AuthorDetails on Author {\n  id\n  username\n}\n\nfragment AnswerDetails on Answer {\n  id\n  author {\n    ...AuthorDetails\n  }\n  body\n  comments {\n    ...CommentDetails\n  }\n  points\n  voted\n  createdAt\n  updatedAt\n}\n\nfragment QuestionDetails on Question {\n  id\n  author {\n    ...AuthorDetails\n  }\n  title\n  body\n  tags\n  points\n  views\n  acceptedAnswer\n  comments {\n    ...CommentDetails\n  }\n  answers {\n    ...AnswerDetails\n  }\n  voted\n  createdAt\n  updatedAt\n}\n\nfragment PostQuestionDetails on Question {\n  id\n  author {\n    ...AuthorDetails\n  }\n  title\n  body\n  tags\n  points\n  views\n  voted\n  createdAt\n  updatedAt\n}\n\nfragment LoggedUserDetails on LoggedUser {\n  id\n  username\n  role\n  token\n}\n\nfragment CommentDetails on Comment {\n  id\n  author {\n    ...AuthorDetails\n  }\n  body\n  createdAt\n  updatedAt\n}"];
export function graphql(source: "mutation registerUser($username: String!, $password: String!) {\n  register(username: $username, password: $password) {\n    ...LoggedUserDetails\n  }\n}\n\nmutation loginUser($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    ...LoggedUserDetails\n  }\n}\n\nmutation addQuestion($title: String!, $body: String!, $tags: [String!]!) {\n  postQuestion(title: $title, body: $body, tags: $tags) {\n    ...PostQuestionDetails\n  }\n}\n\nmutation updateQuestion($quesId: ID!, $title: String!, $body: String!, $tags: [String!]!) {\n  editQuestion(quesId: $quesId, title: $title, body: $body, tags: $tags) {\n    ...QuestionDetails\n  }\n}\n\nmutation removeQuestion($quesId: ID!) {\n  deleteQuestion(quesId: $quesId)\n}\n\nmutation submitQuesVote($quesId: ID!, $voteType: VoteType!) {\n  voteQuestion(quesId: $quesId, voteType: $voteType) {\n    id\n    voted\n    points\n  }\n}\n\nmutation addComment($parentId: ID!, $parentType: CommentParentType!, $body: String!) {\n  addComment(parentId: $parentId, body: $body, parentType: $parentType) {\n    ...CommentDetails\n  }\n}\n\nmutation editComment($commentId: ID!, $body: String!) {\n  editComment(commentId: $commentId, body: $body) {\n    ...CommentDetails\n  }\n}\n\nmutation deleteComment($commentId: ID!) {\n  deleteComment(commentId: $commentId)\n}\n\nmutation addAnswer($quesId: ID!, $body: String!) {\n  postAnswer(quesId: $quesId, body: $body) {\n    ...AnswerDetails\n  }\n}\n\nmutation updateAnswer($quesId: ID!, $ansId: ID!, $body: String!) {\n  editAnswer(quesId: $quesId, ansId: $ansId, body: $body) {\n    ...AnswerDetails\n  }\n}\n\nmutation removeAnswer($quesId: ID!, $ansId: ID!) {\n  deleteAnswer(quesId: $quesId, ansId: $ansId)\n}\n\nmutation submitAnsVote($quesId: ID!, $ansId: ID!, $voteType: VoteType!) {\n  voteAnswer(quesId: $quesId, ansId: $ansId, voteType: $voteType) {\n    id\n    voted\n    points\n  }\n}\n\nmutation submitAcceptAns($quesId: ID!, $ansId: ID!) {\n  acceptAnswer(quesId: $quesId, ansId: $ansId) {\n    id\n    acceptedAnswer\n  }\n}"): (typeof documents)["mutation registerUser($username: String!, $password: String!) {\n  register(username: $username, password: $password) {\n    ...LoggedUserDetails\n  }\n}\n\nmutation loginUser($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    ...LoggedUserDetails\n  }\n}\n\nmutation addQuestion($title: String!, $body: String!, $tags: [String!]!) {\n  postQuestion(title: $title, body: $body, tags: $tags) {\n    ...PostQuestionDetails\n  }\n}\n\nmutation updateQuestion($quesId: ID!, $title: String!, $body: String!, $tags: [String!]!) {\n  editQuestion(quesId: $quesId, title: $title, body: $body, tags: $tags) {\n    ...QuestionDetails\n  }\n}\n\nmutation removeQuestion($quesId: ID!) {\n  deleteQuestion(quesId: $quesId)\n}\n\nmutation submitQuesVote($quesId: ID!, $voteType: VoteType!) {\n  voteQuestion(quesId: $quesId, voteType: $voteType) {\n    id\n    voted\n    points\n  }\n}\n\nmutation addComment($parentId: ID!, $parentType: CommentParentType!, $body: String!) {\n  addComment(parentId: $parentId, body: $body, parentType: $parentType) {\n    ...CommentDetails\n  }\n}\n\nmutation editComment($commentId: ID!, $body: String!) {\n  editComment(commentId: $commentId, body: $body) {\n    ...CommentDetails\n  }\n}\n\nmutation deleteComment($commentId: ID!) {\n  deleteComment(commentId: $commentId)\n}\n\nmutation addAnswer($quesId: ID!, $body: String!) {\n  postAnswer(quesId: $quesId, body: $body) {\n    ...AnswerDetails\n  }\n}\n\nmutation updateAnswer($quesId: ID!, $ansId: ID!, $body: String!) {\n  editAnswer(quesId: $quesId, ansId: $ansId, body: $body) {\n    ...AnswerDetails\n  }\n}\n\nmutation removeAnswer($quesId: ID!, $ansId: ID!) {\n  deleteAnswer(quesId: $quesId, ansId: $ansId)\n}\n\nmutation submitAnsVote($quesId: ID!, $ansId: ID!, $voteType: VoteType!) {\n  voteAnswer(quesId: $quesId, ansId: $ansId, voteType: $voteType) {\n    id\n    voted\n    points\n  }\n}\n\nmutation submitAcceptAns($quesId: ID!, $ansId: ID!) {\n  acceptAnswer(quesId: $quesId, ansId: $ansId) {\n    id\n    acceptedAnswer\n  }\n}"];
export function graphql(source: "query fetchQuestions($sortBy: QuestionSortBy!, $page: Int!, $limit: Int!, $filterByTag: String, $filterBySearch: String) {\n  getQuestions(\n    sortBy: $sortBy\n    page: $page\n    limit: $limit\n    filterByTag: $filterByTag\n    filterBySearch: $filterBySearch\n  ) {\n    totalCount\n    currentPage\n    pageSize\n    search\n    tag\n    sortBy\n    questions {\n      id\n      author {\n        ...AuthorDetails\n      }\n      title\n      body\n      tags\n      points\n      views\n      createdAt\n      updatedAt\n      answerCount\n    }\n  }\n}\n\nquery fetchQuestion($quesId: ID!) {\n  viewQuestion(quesId: $quesId) {\n    id\n    author {\n      ...AuthorDetails\n    }\n    title\n    body\n    tags\n    points\n    views\n    createdAt\n    updatedAt\n    answers {\n      ...AnswerDetails\n    }\n    comments {\n      ...CommentDetails\n    }\n    acceptedAnswer\n    voted\n  }\n}\n\nquery fetchUser($username: String!) {\n  getUser(username: $username) {\n    id\n    username\n    role\n    createdAt\n    rep\n    totalQuestions\n    totalAnswers\n    recentQuestions {\n      id\n      title\n      points\n      createdAt\n    }\n    recentAnswers {\n      id\n      title\n      points\n      createdAt\n    }\n  }\n}\n\nquery fetchAllTags($limit: Int!, $cursor: ID, $filterBySearch: String) {\n  getAllTags(limit: $limit, cursor: $cursor, filterBySearch: $filterBySearch) {\n    tags {\n      name\n      id\n      questionCount\n    }\n    nextCursor\n  }\n}\n\nquery fetchAllUsers {\n  getAllUsers {\n    id\n    username\n    createdAt\n  }\n}"): (typeof documents)["query fetchQuestions($sortBy: QuestionSortBy!, $page: Int!, $limit: Int!, $filterByTag: String, $filterBySearch: String) {\n  getQuestions(\n    sortBy: $sortBy\n    page: $page\n    limit: $limit\n    filterByTag: $filterByTag\n    filterBySearch: $filterBySearch\n  ) {\n    totalCount\n    currentPage\n    pageSize\n    search\n    tag\n    sortBy\n    questions {\n      id\n      author {\n        ...AuthorDetails\n      }\n      title\n      body\n      tags\n      points\n      views\n      createdAt\n      updatedAt\n      answerCount\n    }\n  }\n}\n\nquery fetchQuestion($quesId: ID!) {\n  viewQuestion(quesId: $quesId) {\n    id\n    author {\n      ...AuthorDetails\n    }\n    title\n    body\n    tags\n    points\n    views\n    createdAt\n    updatedAt\n    answers {\n      ...AnswerDetails\n    }\n    comments {\n      ...CommentDetails\n    }\n    acceptedAnswer\n    voted\n  }\n}\n\nquery fetchUser($username: String!) {\n  getUser(username: $username) {\n    id\n    username\n    role\n    createdAt\n    rep\n    totalQuestions\n    totalAnswers\n    recentQuestions {\n      id\n      title\n      points\n      createdAt\n    }\n    recentAnswers {\n      id\n      title\n      points\n      createdAt\n    }\n  }\n}\n\nquery fetchAllTags($limit: Int!, $cursor: ID, $filterBySearch: String) {\n  getAllTags(limit: $limit, cursor: $cursor, filterBySearch: $filterBySearch) {\n    tags {\n      name\n      id\n      questionCount\n    }\n    nextCursor\n  }\n}\n\nquery fetchAllUsers {\n  getAllUsers {\n    id\n    username\n    createdAt\n  }\n}"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;